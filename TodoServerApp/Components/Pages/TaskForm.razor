@page "/tasks/add"
@inject IDataService data
@inject NavigationManager navigate
@page "/tasks/{Id:int}"

@if (TaskItem != null)
{
    <EditForm Model="TaskItem" FormName="TaskForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>Новая задача</h2>
        <InputNumber @bind-Value="TaskItem.Id" hidden />

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Заголовок</label>
            <InputText @bind-Value="TaskItem.Title" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Title" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Описание</label>
            <InputTextArea @bind-Value="TaskItem.Description" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Description" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Дата окончания</label>
            <InputDate @bind-Value="TaskItem.FinishDate" Class="form-control" />
            <ValidationMessage For="() => TaskItem.FinishDate" />
        </div>

        <!-- Выпадающий список для приоритета -->
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Приоритет</label>
            <InputSelect @bind-Value="TaskItem.PriorityId" Class="form-control">
                @foreach (var priority in priorities)
                {
                    <option value="@priority.Id">@priority.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="() => TaskItem.PriorityId" />
        </div>

        <div class="btn-group">
            <button class="btn btn-primary m-2" type="submit">Сохранить</button>
            <a class="btn btn-primary m-2" href="/">Отмена</a>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    TaskItem TaskItem { get; set; } = new();

    // Список приоритетов
    IEnumerable<Priority> priorities = Enumerable.Empty<Priority>();

    protected override async Task OnInitializedAsync()
    {
        priorities = await data.GetPrioritiesAsync(); // Загрузка приоритетов из справочника
        await base.OnInitializedAsync();

        if (TaskItem == null)
        {
            if (Id != 0)
            {
                var src = await data.GetTaskAsync(Id);
                TaskItem.Id = src.Id;
                TaskItem.Title = src.Title;
                TaskItem.Description = src.Description;
                TaskItem.FinishDate = src.FinishDate;
                TaskItem.PriorityId = src.PriorityId; 
            }
        }
    }

    async Task ValidSubmit()
    {
        await data.SaveAsync(TaskItem!);
        navigate.NavigateTo("/");
    }
}
